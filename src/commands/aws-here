#!/bin/bash

# If no machine, then create.
if ! docker-machine ls -q | grep --quiet '^aws-sandbox$' ; then
  docker-machine create --driver amazonec2 --amazonec2-open-port 8888 --amazonec2-region us-east-1 --amazonec2-instance-type t2.micro $REMOTE_MACHINE_NAME
fi

# If not running, then start
if [[ $(docker-machine ls -q --filter name=$REMOTE_MACHINE_NAME --filter state=Running) = "" ]]; then
  docker-machine start $REMOTE_MACHINE_NAME
  docker-machine regenerate-certs $REMOTE_MACHINE_NAME --force
fi

echo "AWS Machine IP:"
echo $(docker-machine ip $REMOTE_MACHINE_NAME)

echo "Using AWS Machine for Docker:"
eval $(docker-machine env $REMOTE_MACHINE_NAME)

ej-write-state AWS_ACTIVE true

echo "Setting current folder as Working Directory"
ej-write-state LOCAL_DATA_PATH ${PWD}
ej-write-state JUPYTER_ROOT "$REMOTE_DATA_ROOT/${PWD##*/}"
ej-write-state JUPYTER_CONFIG "$REMOTE_DATA_ROOT/$JUPYTER_CONFIG_FOLDER"

# the push command relies on the local folder in a bad way. This Should
# be moved to state.
echo "Pushing current folder to AWS"
easy-jupyter push-to-aws

echo "Opening local port 8888 and forwarding to remote machine"
docker-machine ssh $REMOTE_MACHINE_NAME -f -N -L 8888:localhost:8888

echo "NOTE: you are now running docker on AWS. You should use 'easy-jupyter notebook/lab' to boot a jupyter process"
echo "NOTE: you must run: 'easy-jupyter stop-aws/destroy-aws' when you're finished working!"
echo "WARNING: data is persisted on the AWS instance ONLY. Run 'easy-jupyter pull-from-aws' to persist data locally."
